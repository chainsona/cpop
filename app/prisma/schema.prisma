// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  walletAddress String?  @unique
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  poaps Poap[]
}

model Poap {
  id          String     @id @default(cuid())
  title       String
  description String
  imageUrl    String
  website     String?
  startDate   DateTime
  endDate     DateTime
  attendees   Int?
  status      PoapStatus @default(Draft)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Creator relationship
  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id])

  // Relations to the configuration entities
  attributes          Attributes?
  settings            Settings?
  distributionMethods DistributionMethod[]
  tokens              PoapToken[]
}

enum PoapStatus {
  Draft
  Published
  Distributed
  Unclaimable
}

// Distribution related models
model DistributionMethod {
  id        String           @id @default(cuid())
  poapId    String
  type      DistributionType
  disabled  Boolean          @default(false)
  deleted   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  poap          Poap           @relation(fields: [poapId], references: [id], onDelete: Cascade)
  claimLinks    ClaimLink[]
  secretWord    SecretWord?
  locationBased LocationBased?
}

enum DistributionType {
  ClaimLinks
  SecretWord
  LocationBased
}

model ClaimLink {
  id                   String    @id @default(cuid())
  distributionMethodId String
  token                String    @unique
  claimed              Boolean   @default(false)
  claimedAt            DateTime?
  expiresAt            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  distributionMethod DistributionMethod @relation(fields: [distributionMethodId], references: [id], onDelete: Cascade)
}

model SecretWord {
  id                   String    @id @default(cuid())
  distributionMethodId String    @unique
  word                 String
  maxClaims            Int?
  claimCount           Int       @default(0)
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  distributionMethod DistributionMethod @relation(fields: [distributionMethodId], references: [id], onDelete: Cascade)
}

model LocationBased {
  id                   String    @id @default(cuid())
  distributionMethodId String    @unique
  city                 String
  country              String?
  latitude             Float?
  longitude            Float?
  radius               Int       @default(500) // In meters
  maxClaims            Int?
  claimCount           Int       @default(0)
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  distributionMethod DistributionMethod @relation(fields: [distributionMethodId], references: [id], onDelete: Cascade)
}

// Attributes related models
model Attributes {
  id          String    @id @default(cuid())
  poapId      String    @unique
  eventType   EventType @default(Physical)
  platform    String?
  platformUrl String?
  city        String?
  country     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  poap         Poap          @relation(fields: [poapId], references: [id], onDelete: Cascade)
  artists      Artist[]
  organization Organization?
}

enum EventType {
  Physical
  Online
}

model Artist {
  id           String   @id @default(cuid())
  attributesId String
  name         String
  url          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  attributes Attributes @relation(fields: [attributesId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String   @id @default(cuid())
  attributesId String   @unique
  name         String
  url          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  attributes Attributes @relation(fields: [attributesId], references: [id], onDelete: Cascade)
}

// Settings related model
model Settings {
  id               String     @id @default(cuid())
  poapId           String     @unique
  defaultStartDate DateTime?
  defaultEndDate   DateTime?
  includeTime      Boolean    @default(false)
  visibility       Visibility @default(Public)
  allowSearch      Boolean    @default(true)
  notifyOnClaim    Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relations
  poap Poap @relation(fields: [poapId], references: [id], onDelete: Cascade)
}

enum Visibility {
  Public
  Unlisted
  Private
}

// Token model to store mint information
model PoapToken {
  id                String    @id @default(uuid())
  poapId            String
  mintAddress       String    @unique
  supply            Int
  decimals          Int       @default(0)
  metadataUri       String?
  metadataUpdatedAt DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  poap Poap @relation(fields: [poapId], references: [id], onDelete: Cascade)
}
